#include "shared/allocation_utility.h"
#include "shared/test.h"

#include "ktl/ktl_alloc_fwd.h"

#define KTL_DEBUG_ASSERT
#include "ktl/allocators/fallback.h"
#include "ktl/allocators/linear_allocator.h"
#include "ktl/allocators/mallocator.h"
#include "ktl/allocators/stack_allocator.h"

// Naming scheme: test_fallback_[Primary]_[Fallback]_[Container]_[Type]
// Contains tests that relate directly to the ktl::fallback_allocator

namespace ktl::test::fallback_allocator
{
    KTL_ADD_TEST(test_fallback_variadic)
    {
        // Autogenerated allocator, which should use exactly 2 comparisons, since the tree is full
        using Alloc1 = fallback_builder_max<
            linear_allocator<1024>,
            linear_allocator<2048>,
            linear_allocator<4096>,
            mallocator>;

        // This allocator might use up to 3 comparisons, since the tree isn't complete
        using Alloc2 = fallback<
            linear_allocator<1024>,
            fallback<
                linear_allocator<2048>,
                fallback<
                    linear_allocator<4096>,
                    mallocator>>>;

        // More complex allocator where the tree isn't full
        using Alloc3 = fallback_builder_max<
            linear_allocator<1024>,
            linear_allocator<2048>,
            linear_allocator<4096>,
            linear_allocator<8192>,
            mallocator>;

        // Same allocator as above, but written manually, where you can see the tree structure
        using Alloc4 = fallback<
            linear_allocator<1024>,
            fallback<
                fallback<
                    linear_allocator<2048>,
                    linear_allocator<4096>>,
                fallback<
                    linear_allocator<8192>,
                    mallocator>>>;

        // A left-leaning version of the allocator above
        using Alloc5 = fallback<
            fallback<
                fallback<
                    linear_allocator<1024>,
                    linear_allocator<2048>>,
                fallback<
                    linear_allocator<4096>,
                    linear_allocator<8192>>>,
            mallocator>;

        Alloc1 alloc1;
        Alloc2 alloc2;
        Alloc3 alloc3;
        Alloc4 alloc4;
        Alloc5 alloc5;

        static_assert(detail::has_no_value_type<Alloc1>::value);
        static_assert(detail::has_no_value_type<Alloc2>::value);
        static_assert(detail::has_no_value_type<Alloc3>::value);
        static_assert(detail::has_no_value_type<Alloc4>::value);
        static_assert(detail::has_no_value_type<Alloc5>::value);

        static_assert(!std::is_same_v<Alloc1, Alloc2>, "The allocator types shouldn't match");
        static_assert(std::is_same_v<Alloc3, Alloc4>, "The allocator types don't match");
        static_assert(!std::is_same_v<Alloc3, Alloc5>, "The allocator types shouldn't match");
    }
    
    KTL_ADD_TEST(test_cascading_linear_raw_allocate)
    {
        stack<16> primaryStack;
        stack<4096> fallbackStack;
        fallback<stack_allocator<16>, stack_allocator<4096>> alloc(primaryStack, fallbackStack);
        assert_raw_allocate_deallocate<2, 4, 8, 16, 32, 64>(alloc);
    }

    KTL_ADD_TEST(test_fallback_stack_stack_unordered_double)
    {
        stack<16> primaryStack;
        stack<4096> fallbackStack;
        type_fallback_allocator<double, stack_allocator<16>, stack_allocator<4096>> alloc(primaryStack, fallbackStack);
        assert_unordered_values<double>(alloc);
    }

    KTL_ADD_TEST(test_fallback_stack_linear_unordered_double)
    {
        stack<16> primaryStack;
        type_fallback_allocator<double, stack_allocator<16>, linear_allocator<4096>> alloc(primaryStack);
        assert_unordered_values<double>(alloc);
    }

    KTL_ADD_TEST(test_fallback_stack_malloc_unordered_double)
    {
        stack<16> primaryStack;
        type_fallback_allocator<double, stack_allocator<16>, mallocator> alloc(primaryStack);
        assert_unordered_values<double>(alloc);
    }

    KTL_ADD_TEST(test_fallback_linear_linear_unordered_double)
    {
        type_fallback_allocator<double, linear_allocator<32>, linear_allocator<4096>> alloc;
        assert_unordered_values<double>(alloc);
    }
}